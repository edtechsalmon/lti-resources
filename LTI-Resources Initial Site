<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>LTI Resources</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }

    #search-box {
      width: 70%;
      max-width: 600px;
      padding: 15px;
      margin: 20px auto;
      display: block;
      border-radius: 25px;
      border: 1px solid #ddd;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      transition: box-shadow 0.2s;
    }

    #search-box:focus {
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
      outline: none;
    }

    #filters {
      display: flex;
      justify-content: center;
      margin: 20px;
    }

    #topic-filter, #type-filter {
      margin: 0 10px;
      padding: 10px;
      border-radius: 5px;
      border: 1px solid #ddd;
    }

    /* Card Styling */
    .resource-card {
      border: 1px solid #ddd;
      padding: 20px;
      margin-bottom: 15px;
      border-radius: 10px;
      background-color: #fff;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      transition: transform 0.2s, box-shadow 0.2s;
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      text-align: left;
    }

    .resource-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }

    .resource-title {
      font-size: 24px;
      font-weight: bold;
      color: #333;
      margin-bottom: 15px;
    }

    .resource-content {
      font-size: 16px;
      color: #555;
      line-height: 1.6;
      margin-bottom: 20px;
    }

    .resource-content p {
      margin: 5px 0;
    }

    .resource-links {
      font-size: 16px;
      color: #007bff;
      text-decoration: underline;
      margin-top: 15px;
    }

    /* Feedback Section Styling */
    #feedback-section {
      display: none;
      margin-top: 20px;
      text-align: center;
    }

    #feedback-section p {
      display: inline;
      margin-right: 10px;
    }

    .feedback-btn {
      padding: 10px;
      background-color: orange;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
  </style>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
</head>
<body>
  <h1 style="text-align: center;">LTI Resources</h1>

  <input type="search" id="search-box" placeholder="Search LTI Resources">

  <div id="filters">
    <select id="topic-filter">
      <option value="">Filter by Topic</option>
    </select>
    <select id="type-filter">
      <option value="">Filter by Resource Type</option>
    </select>
  </div>

  <div id="resource-list"></div>

  <div id="feedback-section">
    <p>Didn't find what you were looking for?</p>
    <a href="https://forms.gle/PNmHfnkTT81Q3MhH7" target="_blank">
      <button class="feedback-btn">Submit Resource Request</button>
    </a>
  </div>

  <script>
    const csvURL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vRcq9HeAFtyXwPAfEEbEDBHUKOZhk-KuZEAkvDb92uSs89LFwCosPlw7LCuDhLgAr7Cetz8DiKklWES/pub?gid=0&single=true&output=csv";
    let allResources = [];

    function fetchLTIResources() {
      fetch(csvURL)
        .then(response => response.text())
        .then(csvText => {
          Papa.parse(csvText, {
            header: true,
            skipEmptyLines: true,
            complete: function(results) {
              // Filter out rows where the topic is blank
              allResources = results.data.filter(resource => resource.Topic && resource.Topic.trim() !== "");
              populateFilters(allResources);
              displayResources(allResources);

              // Setup search functionality
              const searchBox = document.getElementById('search-box');
              searchBox.addEventListener('input', () => {
                filterAndDisplayResources();
              });

              // Setup filter functionality
              document.getElementById('topic-filter').addEventListener('change', () => {
                updateTypeFilterOptions();
                filterAndDisplayResources();
              });

              document.getElementById('type-filter').addEventListener('change', () => {
                updateTopicFilterOptions();
                filterAndDisplayResources();
              });
            },
            error: function(error) {
              console.error('Error parsing CSV:', error);
            }
          });
        })
        .catch(error => console.error('Error fetching CSV:', error));
    }

    function populateFilters(resources) {
      const topicFilter = document.getElementById('topic-filter');
      const typeFilter = document.getElementById('type-filter');

      // Get unique values for Topic and Resource Type, treating each comma-separated value as a separate tag
      const topics = [...new Set(resources.flatMap(resource => resource.Topic.split(',').map(tag => tag.trim())))];
      const types = [...new Set(resources.flatMap(resource => resource['Resource Type'].split(',').map(tag => tag.trim())))];

      topics.forEach(topic => {
        const option = document.createElement('option');
        option.value = topic;
        option.textContent = topic;
        topicFilter.appendChild(option);
      });

      types.forEach(type => {
        const option = document.createElement('option');
        option.value = type;
        option.textContent = type;
        typeFilter.appendChild(option);
      });
    }

    function updateTypeFilterOptions() {
      const topicFilterValue = document.getElementById('topic-filter').value;
      const typeFilter = document.getElementById('type-filter');
      typeFilter.innerHTML = '<option value="">Filter by Resource Type</option>';

      const filteredTypes = topicFilterValue ? [...new Set(allResources.filter(resource => resource.Topic.split(',').map(tag => tag.trim()).includes(topicFilterValue)).flatMap(resource => resource['Resource Type'].split(',').map(tag => tag.trim())))] : [...new Set(allResources.flatMap(resource => resource['Resource Type'].split(',').map(tag => tag.trim())))];

      filteredTypes.forEach(type => {
        const option = document.createElement('option');
        option.value = type;
        option.textContent = type;
        typeFilter.appendChild(option);
      });
    }

    function updateTopicFilterOptions() {
      const typeFilterValue = document.getElementById('type-filter').value;
      const topicFilter = document.getElementById('topic-filter');
      topicFilter.innerHTML = '<option value="">Filter by Topic</option>';

      const filteredTopics = typeFilterValue ? [...new Set(allResources.filter(resource => resource['Resource Type'].split(',').map(tag => tag.trim()).includes(typeFilterValue)).flatMap(resource => resource.Topic.split(',').map(tag => tag.trim())))] : [...new Set(allResources.flatMap(resource => resource.Topic.split(',').map(tag => tag.trim())))];

      filteredTopics.forEach(topic => {
        const option = document.createElement('option');
        option.value = topic;
        option.textContent = topic;
        topicFilter.appendChild(option);
      });
    }

    function filterAndDisplayResources() {
      const query = document.getElementById('search-box').value.toLowerCase();
      const topicFilterValue = document.getElementById('topic-filter').value;
      const typeFilterValue = document.getElementById('type-filter').value;

      const filteredResources = allResources.filter(resource => {
        const matchesSearch = Object.values(resource).some(value => value.toLowerCase().includes(query));
        const matchesTopic = topicFilterValue ? resource.Topic.split(',').map(tag => tag.trim()).includes(topicFilterValue) : true;
        const matchesType = typeFilterValue ? resource['Resource Type'].split(',').map(tag => tag.trim()).includes(typeFilterValue) : true;
        return matchesSearch && matchesTopic && matchesType;
      });

      displayResources(filteredResources);

      // Show feedback section when typing starts
      const feedbackSection = document.getElementById('feedback-section');
      if (query) {
        feedbackSection.style.display = 'block';
      } else {
        feedbackSection.style.display = 'none';
      }
    }

    function displayResources(resources) {
      const resourceList = document.getElementById('resource-list');
      resourceList.innerHTML = resources.map(resource => createCard(resource)).join('');
    }

    function createCard(resource) {
      return `
        <div class="resource-card">
          <div class="resource-title">${resource.Name || 'Untitled Resource'}</div>
          <div class="resource-content">
            <p>${resource['Description HTML'] || resource.Description || 'N/A'}</p>
            <p style="font-style: italic; margin-top: 10px;">${resource.Topic || ''}${resource.Topic && resource['Resource Type'] ? ', ' : ''}${resource['Resource Type'] || ''}</p>
            <p style="font-style: italic;"><strong>Authors:</strong> ${resource.Authors || 'N/A'} (Last Updated: ${resource['Last Updated'] || 'N/A'})</p>
            <p style="font-style: italic;"><strong>Audience:</strong> ${resource.Audience || 'N/A'}${resource['Publicly Posted'] ? `, (${resource['Publicly Posted']})` : ''}</p>
            <p style="font-style: italic; margin-top: 15px;"><strong>Links:</strong> <a href="${resource['Links HTML'] || ''}</p>
          </div>
        </div>
      `;
    }

    fetchLTIResources();
  </script>
</body>
</html>
